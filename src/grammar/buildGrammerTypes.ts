import { spawnSync } from 'child_process'
import { Project } from 'ts-morph'

const autogenerationNote = `
// ---
// Autogenerated by buildGrammarTypes.ts
// ---
`

// TODO: Cleanup
function main() {
  const project = new Project({
    tsConfigFilePath: './tsconfig.json',
  })
  const nodesFile = project.getSourceFileOrThrow('src/grammar/nodes.ts')

  const nodeInterfaces = nodesFile
    .getInterfaces()
    .map((i) => i.getName())
    .filter((name) => name !== 'GDNodeBase')

  const nodesUnionFile =
    project.getSourceFile('src/grammar/nodesUnion.ts') ||
    project.createSourceFile('src/grammar/nodesUnion.ts')

  nodesUnionFile.removeText()

  nodesUnionFile.set

  nodesUnionFile.addImportDeclaration({
    moduleSpecifier: './kind',
    leadingTrivia: (writer) => writer.writeLine(autogenerationNote),
    namedImports: ['GDKind'],
  })
  nodesUnionFile.addImportDeclaration({
    moduleSpecifier: './nodes',
    namespaceImport: 'GD',
  })
  nodesUnionFile.addTypeAlias({
    name: 'GDNode',
    type: nodeInterfaces
      .map((nodeInterface) => `GD.${nodeInterface}`)
      .join(' | '),
    isExported: true,
  })

  for (const nodeInterface of nodeInterfaces) {
    const gdKindName = nodeInterface.replace(/^GD/, '')
    nodesUnionFile.addFunction({
      name: `is${nodeInterface}`,
      isExported: true,
      parameters: [{ name: 'node', type: `GDNode` }],
      returnType: `node is GD.${nodeInterface}`,
      statements: `return node.kind === GDKind.${gdKindName}`,
    })
  }

  nodesUnionFile.saveSync()

  // run prettier on the generated file
  spawnSync('prettier', ['--write', 'src/grammar/nodesUnion.ts'])
}

main()
