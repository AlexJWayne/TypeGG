// ---
// Autogenerated by buildGrammarTypes.ts
// ---

import { GDKind } from './kind'
import * as GD from './nodes'

export type GDNode =
  | GD.GDIdentifier
  | GD.GDBooleanLiteral
  | GD.GDNumericLiteral
  | GD.GDStringLiteral
  | GD.GDCallExpression
  | GD.GDUnaryExpression
  | GD.GDBinaryExpression
  | GD.GDClassProperty
  | GD.GDClassMethod
  | GD.GDParameter
  | GD.GDParenthesizedExpression
  | GD.GDSelfExpression
  | GD.GDIfStatement
  | GD.GDClass
  | GD.GDPropertyAccessExpression
  | GD.GDNullKeyword
  | GD.GDUnsupported
  | GD.GDReturnStatement
  | GD.GDVariableDeclaration
  | GD.GDFragment
  | GD.GDExpressionStatement
  | GD.GDSignal
  | GD.GDArrayLiteral

export function isGDIdentifier(node: GDNode): node is GD.GDIdentifier {
  return node.kind === GDKind.Identifier
}

export function isGDBooleanLiteral(node: GDNode): node is GD.GDBooleanLiteral {
  return node.kind === GDKind.BooleanLiteral
}

export function isGDNumericLiteral(node: GDNode): node is GD.GDNumericLiteral {
  return node.kind === GDKind.NumericLiteral
}

export function isGDStringLiteral(node: GDNode): node is GD.GDStringLiteral {
  return node.kind === GDKind.StringLiteral
}

export function isGDCallExpression(node: GDNode): node is GD.GDCallExpression {
  return node.kind === GDKind.CallExpression
}

export function isGDUnaryExpression(
  node: GDNode,
): node is GD.GDUnaryExpression {
  return node.kind === GDKind.UnaryExpression
}

export function isGDBinaryExpression(
  node: GDNode,
): node is GD.GDBinaryExpression {
  return node.kind === GDKind.BinaryExpression
}

export function isGDClassProperty(node: GDNode): node is GD.GDClassProperty {
  return node.kind === GDKind.ClassProperty
}

export function isGDClassMethod(node: GDNode): node is GD.GDClassMethod {
  return node.kind === GDKind.ClassMethod
}

export function isGDParameter(node: GDNode): node is GD.GDParameter {
  return node.kind === GDKind.Parameter
}

export function isGDParenthesizedExpression(
  node: GDNode,
): node is GD.GDParenthesizedExpression {
  return node.kind === GDKind.ParenthesizedExpression
}

export function isGDSelfExpression(node: GDNode): node is GD.GDSelfExpression {
  return node.kind === GDKind.SelfExpression
}

export function isGDIfStatement(node: GDNode): node is GD.GDIfStatement {
  return node.kind === GDKind.IfStatement
}

export function isGDClass(node: GDNode): node is GD.GDClass {
  return node.kind === GDKind.Class
}

export function isGDPropertyAccessExpression(
  node: GDNode,
): node is GD.GDPropertyAccessExpression {
  return node.kind === GDKind.PropertyAccessExpression
}

export function isGDNullKeyword(node: GDNode): node is GD.GDNullKeyword {
  return node.kind === GDKind.NullKeyword
}

export function isGDUnsupported(node: GDNode): node is GD.GDUnsupported {
  return node.kind === GDKind.Unsupported
}

export function isGDReturnStatement(
  node: GDNode,
): node is GD.GDReturnStatement {
  return node.kind === GDKind.ReturnStatement
}

export function isGDVariableDeclaration(
  node: GDNode,
): node is GD.GDVariableDeclaration {
  return node.kind === GDKind.VariableDeclaration
}

export function isGDFragment(node: GDNode): node is GD.GDFragment {
  return node.kind === GDKind.Fragment
}

export function isGDExpressionStatement(
  node: GDNode,
): node is GD.GDExpressionStatement {
  return node.kind === GDKind.ExpressionStatement
}

export function isGDSignal(node: GDNode): node is GD.GDSignal {
  return node.kind === GDKind.Signal
}

export function isGDArrayLiteral(node: GDNode): node is GD.GDArrayLiteral {
  return node.kind === GDKind.ArrayLiteral
}
