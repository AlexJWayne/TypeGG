import { GDKind } from "./kind";
import type { GDIdentifier, GDBooleanLiteral, GDNumericLiteral, GDStringLiteral, GDCallExpression, GDUnaryExpression, GDBinaryExpression, GDClassProperty, GDClassMethod, GDParameter, GDParenthesizedExpression, GDSelfKeyword, GDIfStatement } from "./nodes";

// ---
// Autogenerated by buildGrammarTypes.ts
// ---
export type GDNode = GDIdentifier | GDBooleanLiteral | GDNumericLiteral | GDStringLiteral | GDCallExpression | GDUnaryExpression | GDBinaryExpression | GDClassProperty | GDClassMethod | GDParameter | GDParenthesizedExpression | GDSelfKeyword | GDIfStatement;

export function isGDIdentifier(node: GDNode): node is GDIdentifier {
    return node.kind === GDKind.Identifier
}

export function isGDBooleanLiteral(node: GDNode): node is GDBooleanLiteral {
    return node.kind === GDKind.BooleanLiteral
}

export function isGDNumericLiteral(node: GDNode): node is GDNumericLiteral {
    return node.kind === GDKind.NumericLiteral
}

export function isGDStringLiteral(node: GDNode): node is GDStringLiteral {
    return node.kind === GDKind.StringLiteral
}

export function isGDCallExpression(node: GDNode): node is GDCallExpression {
    return node.kind === GDKind.CallExpression
}

export function isGDUnaryExpression(node: GDNode): node is GDUnaryExpression {
    return node.kind === GDKind.UnaryExpression
}

export function isGDBinaryExpression(node: GDNode): node is GDBinaryExpression {
    return node.kind === GDKind.BinaryExpression
}

export function isGDClassProperty(node: GDNode): node is GDClassProperty {
    return node.kind === GDKind.ClassProperty
}

export function isGDClassMethod(node: GDNode): node is GDClassMethod {
    return node.kind === GDKind.ClassMethod
}

export function isGDParameter(node: GDNode): node is GDParameter {
    return node.kind === GDKind.Parameter
}

export function isGDParenthesizedExpression(node: GDNode): node is GDParenthesizedExpression {
    return node.kind === GDKind.ParenthesizedExpression
}

export function isGDSelfKeyword(node: GDNode): node is GDSelfKeyword {
    return node.kind === GDKind.SelfKeyword
}

export function isGDIfStatement(node: GDNode): node is GDIfStatement {
    return node.kind === GDKind.IfStatement
}
