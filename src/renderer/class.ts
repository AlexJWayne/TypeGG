import { GDKind } from '../grammar/kind'
import { GDClass } from '../grammar/nodes'
import { line } from '../util/line'

import { renderClassProperty } from './classProperty'

export function renderClass(classNode: GDClass): string {
  return [
    line('# Autogenerated by TypeGG'),
    line(),
    line(`class_name ${classNode.name}`),
    classNode.extends && line(`extends ${classNode.extends}`),
    classNode.properties.map(renderClassProperty),
    // ...classNode.getMethods().map(parseMethod),
  ]
    .filter((ln) => ln)
    .join('')
}

if (import.meta.vitest) {
  const { expect, test } = import.meta.vitest

  test('class name', () => {
    expect(
      renderClass({
        kind: GDKind.Class,
        name: 'Foo',
        extends: null,
        properties: [],
        methods: [],
      }),
    ).toEqualGdScript(`
      class_name Foo
    `)
  })

  test('extends', () => {
    expect(
      renderClass({
        kind: GDKind.Class,
        name: 'Foo',
        extends: 'Sprite2D',
        properties: [],
        methods: [],
      }),
    ).toEqualGdScript(`
      class_name Foo
      extends Sprite2D
    `)
  })

  test('instance property', () => {
    expect(
      renderClass({
        kind: GDKind.Class,
        name: 'Foo',
        extends: null,
        properties: [
          {
            kind: GDKind.ClassProperty,
            name: 'bar',
            type: 'String',
            initial: null,
            isExported: false,
          },
        ],
        methods: [],
      }),
    ).toEqualGdScript(`
      class_name Foo
      var bar: String
    `)
  })

  test('exported property', () => {
    expect(
      renderClass({
        kind: GDKind.Class,
        name: 'Foo',
        extends: null,
        properties: [
          {
            kind: GDKind.ClassProperty,
            name: 'foo',
            type: 'String',
            initial: null,
            isExported: true,
          },
        ],
        methods: [],
      }),
    ).toEqualGdScript(`
      class_name Foo
      @export var foo: String
    `)
  })
}
