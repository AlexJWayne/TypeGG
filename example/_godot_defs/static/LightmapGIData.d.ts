
/**
 * [LightmapGIData] contains baked lightmap and dynamic object probe data for [LightmapGI]. It is replaced every time lightmaps are baked in [LightmapGI].
 *
*/
declare class LightmapGIData extends Resource  {

  
/**
 * [LightmapGIData] contains baked lightmap and dynamic object probe data for [LightmapGI]. It is replaced every time lightmaps are baked in [LightmapGI].
 *
*/
  new(): LightmapGIData; 
  static "new"(): LightmapGIData 


/**
 * The lightmap atlas texture generated by the lightmapper.
 *
 * **Deprecated.** The lightmap atlas can now have multiple textures. See [member lightmap_textures].
 *
*/
light_texture: TextureLayered;

/** The lightmap atlas textures generated by the lightmapper. */
lightmap_textures: TextureLayered[];

/** Adds an object that is considered baked within this [LightmapGIData]. */
add_user(): void;

/** Clear all objects that are considered baked within this [LightmapGIData]. */
clear_users(): void;

/** Returns the number of objects that are considered baked within this [LightmapGIData]. */
get_user_count(): int;

/** Returns the [NodePath] of the baked object at index [param user_idx]. */
get_user_path(): NodePathType;

/** If [code]true[/code], lightmaps were baked with directional information. See also [member LightmapGI.directional]. */
is_using_spherical_harmonics(): boolean;

/**
 * If [param uses_spherical_harmonics] is `true`, tells the engine to treat the lightmap data as if it was baked with directional information.
 *
 * **Note:** Changing this value on already baked lightmaps will not cause them to be baked again. This means the material appearance will look incorrect until lightmaps are baked again, in which case the value set here is discarded as the entire [LightmapGIData] resource is replaced by the lightmapper.
 *
*/
set_uses_spherical_harmonics(): void;

  connect<T extends SignalsOf<LightmapGIData>>(signal: T, method: SignalFunction<LightmapGIData[T]>): number;






}

